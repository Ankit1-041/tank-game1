{
  "openapi": "3.0.3",
  "info": {
    "title": "JsBattle server API",
    "description": "Internal API of JsBattle ([Swagger File](../api-docs.json))",
    "version": "3.3.0"
  },
  "components": {
    "securitySchemes": {},
    "schemas": {
      "Battle": {
        "type": "object",
        "required": [
          "createdAt",
          "ubd"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/entityId"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "ubd": {
            "$ref": "#/components/schemas/ubd"
          },
          "description": {
            "type": "string",
            "maxLength": 1024
          },
          "meta": {
            "type": "object"
          },
          "owner": {
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        }
      },
      "Challenge": {
        "type": "object",
        "required": [
          "challengeId",
          "userId",
          "code",
          "modifiedAt",
          "completed"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/entityId"
          },
          "challengeId": {
            "$ref": "#/components/schemas/entityId"
          },
          "userId": {
            "$ref": "#/components/schemas/entityId"
          },
          "code": {
            "$ref": "#/components/schemas/code"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "type": "boolean"
          }
        }
      },
      "League": {
        "type": "object",
        "required": [
          "joinedAt",
          "ownerId",
          "ownerName",
          "scriptId",
          "scriptName",
          "fights_total",
          "fights_win",
          "fights_lose",
          "fights_error",
          "score",
          "code"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/entityId"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ownerId": {
            "$ref": "#/components/schemas/entityId"
          },
          "ownerName": {
            "$ref": "#/components/schemas/entityName"
          },
          "scriptId": {
            "$ref": "#/components/schemas/entityId"
          },
          "scriptName": {
            "$ref": "#/components/schemas/entityName"
          },
          "fights_total": {
            "type": "number",
            "minimum": 0
          },
          "fights_win": {
            "type": "number",
            "minimum": 0
          },
          "fights_lose": {
            "type": "number",
            "minimum": 0
          },
          "fights_error": {
            "type": "number",
            "minimum": 0
          },
          "score": {
            "type": "number",
            "minimum": 0
          },
          "code": {
            "$ref": "#/components/schemas/code"
          },
          "hash": {
            "$ref": "#/components/schemas/hash"
          }
        }
      },
      "Script": {
        "type": "object",
        "required": [
          "ownerId",
          "ownerName",
          "scriptName",
          "namespace",
          "code",
          "createdAt",
          "modifiedAt",
          "hash"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/entityId"
          },
          "ownerId": {
            "$ref": "#/components/schemas/entityId"
          },
          "ownerName": {
            "$ref": "#/components/schemas/entityName"
          },
          "scriptName": {
            "$ref": "#/components/schemas/entityName"
          },
          "namespace": {
            "$ref": "#/components/schemas/entityName"
          },
          "code": {
            "$ref": "#/components/schemas/code"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "hash": {
            "$ref": "#/components/schemas/hash"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "username",
          "provider",
          "extUserId",
          "role",
          "createdAt",
          "lastLoginAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/entityId"
          },
          "username": {
            "$ref": "#/components/schemas/entityName"
          },
          "displayName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 32,
            "pattern": "^[A-Za-z0-9\\- .]+$"
          },
          "provider": {
            "$ref": "#/components/schemas/entityName"
          },
          "extUserId": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "registered": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/entityName"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "code": {
        "type": "string",
        "maxLength": 65536
      },
      "email": {
        "type": "string",
        "maxLength": 256,
        "pattern": "^([\\w-]+@([\\w-]+\\.)+[\\w-]+)|$"
      },
      "entityId": {
        "type": "string",
        "minLength": 3,
        "maxLength": 64,
        "pattern": "^[A-Za-z0-9_\\-.\\\\]+$"
      },
      "entityName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 16,
        "pattern": "^[A-Za-z0-9_-]+$"
      },
      "hash": {
        "type": "string",
        "minLength": 16,
        "maxLength": 128,
        "pattern": "^[a-zA-Z0-9]+$"
      },
      "ubd": {
        "type": "string",
        "minLength": 2,
        "maxLength": 524288
      }
    },
    "examples": {
      "Battle": {
        "value": {
          "id": "5f002352d7075d564ec03048",
          "createdAt": "2020-07-04T06:36:02.048Z",
          "expiresAt": "2020-07-05T18:36:02.048Z",
          "ubd": "{\"foo\": \"bar\"}",
          "description": "jsbattle/sniper vs jsbattle/crawler",
          "meta": [
            {
              "id": "5ee5f5ab15fc3f3f278082c4",
              "name": "jsbattle/sniper",
              "winner": true
            },
            {
              "id": "5ee698c99feda049511a15ee",
              "name": "jsbattle/crawler",
              "winner": false
            }
          ],
          "owner": [
            "5ee5f5ab15fc3f3f278082c4",
            "5ee698c99feda049511a15ee"
          ]
        }
      },
      "Challenge": {
        "value": {
          "id": "a2d7075d56b76c234ec03048",
          "userId": "07ec06a685d56ba2d787af44",
          "challengeId": "challenge-8UCUaNvC",
          "modifiedAt": "2020-07-05T18:36:02.048Z",
          "code": "console.log('hello world')",
          "completed": false
        }
      },
      "League": {
        "value": {
          "id": "a2d7075d56b76c234ec03048",
          "jonedAt": "2020-07-05T18:36:02.048Z",
          "ownerId": "07ec06a685d56ba2d787af44",
          "ownerName": "johnny",
          "scriptId": "587ab58706a685daf4407e1",
          "scriptName": "bravo",
          "fights_total": 109,
          "fights_win": 62,
          "fights_lose": 47,
          "fights_error": 0,
          "score": 5688,
          "code": "console.log('hello world')",
          "hash": "4D2B0403F1CC1B465C69814AA49AF1A86A9094FA"
        }
      },
      "Script": {
        "value": {
          "id": "81d7075d564e3e403fc07621",
          "ownerId": "5d564ec076351f082a81d707",
          "ownerName": "johnny",
          "scriptName": "bravo",
          "namespace": "user",
          "code": "console.log('hello world')",
          "createdAt": "2020-07-04T06:36:02.048Z",
          "modifiedAt": "2020-07-04T06:39:42.184Z",
          "hash": "4D2B0403F1CC1B465C69814AA49AF1A86A9094FA"
        }
      },
      "User": {
        "value": {
          "id": "81d7075d564e3e403fc07621",
          "username": "johnny",
          "displayName": "Johnny Bravo",
          "provider": "google",
          "extUserId": "johny.bravo",
          "email": "johny.bravo@example.com",
          "registered": true,
          "role": "user",
          "createdAt": "2020-07-04T06:36:02.048Z",
          "lastLoginAt": "2020-07-04T05:41:19.932Z"
        }
      },
      "code": {
        "value": "console.log('hello wolrd');"
      },
      "email": {
        "value": "johny.bravo@example.com"
      },
      "entityId": {
        "value": "5f003f81d7075d564ec03066"
      },
      "entityName": {
        "value": "bravo"
      },
      "hash": {
        "value": "9AF1A86A4DC1B465C69814AA49094FA2B0403F1C"
      },
      "ubd": {
        "value": "{\"foo\": \"bar\"}"
      }
    }
  },
  "paths": {
    "/api/profile": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "Information about current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          }
        }
      }
    },
    "/api/authMethods": {
      "get": {
        "tags": [
          "account"
        ],
        "description": "List of supported authentication methods",
        "responses": {
          "200": {
            "description": "a successfull response"
          }
        }
      }
    },
    "/api/leaguePreview": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "history of recent league battles",
        "responses": {
          "200": {
            "description": "a successfull response"
          }
        }
      }
    },
    "/api/leaguePreview/replay/{battleId}": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "replay of league battle",
        "parameters": [
          {
            "in": "path",
            "name": "battleId",
            "description": "ID of the battle",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "404": {
            "description": "battle with provided Id does not exist"
          }
        }
      }
    },
    "/api/user/initData": {
      "patch": {
        "tags": [
          "account"
        ],
        "description": "user data used during registration to transit progress from un registered to registered user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "challenges": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "challengeId": {
                          "type": "string"
                        },
                        "completed": {
                          "type": "boolean"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "scripts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "scriptName": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "422": {
            "description": "user already registered"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/scripts": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "list all scripts of current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "post": {
        "tags": [
          "scripts"
        ],
        "description": "create a new script owned by currrent user.",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "422": {
            "description": "script limit exceeded"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/scripts/{scriptId}": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "a script owned by currrent user",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "description": "ID of the script",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "script not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "patch": {
        "tags": [
          "scripts"
        ],
        "description": "update a script owned by currrent user",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "description": "ID of the script",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Script"
              },
              "examples": {
                "Script": {
                  "$ref": "#/components/examples/Script"
                }
              }
            }
          },
          "description": "Script object to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "script not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "delete": {
        "tags": [
          "scripts"
        ],
        "description": "remove a script owned by currrent user",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "description": "ID of the script",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "script not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/challenges": {
      "get": {
        "tags": [
          "challenges"
        ],
        "description": "challenges of current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/challenges/{challengeId}": {
      "get": {
        "tags": [
          "challenges"
        ],
        "description": "specific challenge of  current user",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "description": "ID of the challenge",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "challenge not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "patch": {
        "tags": [
          "challenges"
        ],
        "description": "update specific challenge of  current user",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "description": "ID of the challenge",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "challenge not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/league": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "league summary for current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/league/replay/{battleId}": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "replay of league battle",
        "parameters": [
          {
            "in": "path",
            "name": "battleId",
            "description": "ID of the battle",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "battle with provided Id does not exist"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/league/submission": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "current user submission to the league",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "patch": {
        "tags": [
          "league"
        ],
        "description": "join or re-join the league by current user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scriptId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      },
      "delete": {
        "tags": [
          "league"
        ],
        "description": "leave the league by current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/league/ranktable": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "rank table slice for current user",
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    },
    "/api/user/league/scripts/{scriptId}": {
      "get": {
        "tags": [
          "league"
        ],
        "description": "script from submission to the league",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "description": "ID of the script",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/entityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfull response"
          },
          "401": {
            "description": "not authorized"
          },
          "404": {
            "description": "script not found"
          }
        },
        "security": [
          {
            "oauth_default": []
          }
        ]
      }
    }
  },
  "tags": []
}
