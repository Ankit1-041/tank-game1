{
  "admin,info": {
    "nodeCount":2,"allServices":["apiGateway","auth","battleStore","challenges","league","leagueScheduler","node","queue","scriptStore","ubdPlayer","ubdValidator","userStore"],"nodes":[{"nodeID":"gateway-jsbattle-dev-47845","clusterName":"jsbattle-dev","hostname":"kjamroz-mbp13.home","processUptime":83.16542054,"client":"nodejs v14.2.0","cpu":{"load1":3.3076171875,"load5":3.20068359375,"load15":3.18359375,"cores":8,"utilization":41},"memory":{"free":307081216,"total":17179869184,"percent":1.7874479293823242},"os":{"uptime":659143,"platform":"darwin","user":"kjamroz"},"time":{"now":1591962384717,"iso":"2020-06-12T11:46:24.717Z","utc":"Fri, 12 Jun 2020 11:46:24 GMT"},"services":["queue","auth","ubdValidator","apiGateway","leagueScheduler","node","league","userStore","challenges","scriptStore","battleStore"]},{"nodeID":"worker-jsbattle-dev-47997","clusterName":"jsbattle-dev","hostname":"kjamroz-mbp13.home","processUptime":6.688126715,"client":"nodejs v14.2.0","cpu":{"load1":3.595703125,"load5":3.2548828125,"load15":3.20263671875,"cores":8,"utilization":44},"memory":{"free":305311744,"total":17179869184,"percent":1.7771482467651367},"os":{"uptime":659141,"platform":"darwin","user":"kjamroz"},"time":{"now":1591962382283,"iso":"2020-06-12T11:46:22.283Z","utc":"Fri, 12 Jun 2020 11:46:22 GMT"},"services":["node","ubdPlayer"]}]
  },
  "admin,league": {
    "rows":[{"id":"A76modDgAoTI0rMz","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-1","scriptName":"chicken","joinedAt":"2020-06-12T21:37:45.860Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":1},{"id":"EOd5jrqjBmq4CU3G","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-4","scriptName":"dodge","joinedAt":"2020-06-12T21:37:45.867Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":2},{"id":"Eyj6G0vxwBvepv0d","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-5","scriptName":"jamro","joinedAt":"2020-06-12T21:37:45.895Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":3},{"id":"R6EhG3ud1vdSbMh7","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-7","scriptName":"sniper","joinedAt":"2020-06-12T21:37:45.898Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":4},{"id":"RxdxM0UIntuaCC1E","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-3","scriptName":"crazy","joinedAt":"2020-06-12T21:37:45.864Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":5},{"id":"k06XywaUkaJQ9RlW","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-6","scriptName":"kamikaze","joinedAt":"2020-06-12T21:37:45.896Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":6},{"id":"pSPQRoCeEZxmpONA","ownerId":"int-user-0000-1","ownerName":"jsbattle","scriptId":"int-script-0000-2","scriptName":"crawler","joinedAt":"2020-06-12T21:37:45.862Z","fights_total":0,"fights_win":0,"fights_lose":0,"fights_error":0,"score":0,"rank":7}],"page":1,"pageSize":10,"total":7,"totalPages":1
  },
  "admin,users": [
    {
      "username": "fredric.murphy",
      "displayName": "Fredric Murphy",
      "provider": "facebook",
      "id": "8si8Su024sj2cZwo0",
      "extUserId": "facebook_10477332",
      "email": "fredric.murphy@gmail.com",
      "registered": false,
      "role": "admin",
      "createdAt": "2020-01-01T00:00:00.000Z",
      "lastLoginAt": "2020-01-01T00:00:00.000Z"
    },
    {
      "username": "adam",
      "displayName": "Adam Cage",
      "provider": "github",
      "extUserId": "github_433453",
      "email": "adam@gmail.com",
      "registered": true,
      "role": "user",
      "id": "1WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "john",
      "displayName": "John Adams",
      "provider": "github",
      "extUserId": "github_3452234",
      "email": "ajohn@gmail.com",
      "registered": true,
      "role": "user",
      "id": "2WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "monica",
      "displayName": "Monica Wick",
      "provider": "facebook",
      "extUserId": "facebook_884732934",
      "email": "monica@yahoo.com",
      "registered": true,
      "role": "user",
      "id": "3WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "maya_us",
      "displayName": "Maya Goodman",
      "provider": "facebook",
      "extUserId": "facebook_884732934",
      "email": "maya@yahoo.com",
      "registered": true,
      "role": "user",
      "id": "4WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "denise83",
      "displayName": "Denise McDonald",
      "provider": "slack",
      "extUserId": "slack_43434",
      "email": "denise@google.com",
      "registered": true,
      "role": "user",
      "id": "5WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "albkov",
      "displayName": "Albert Kovalsky",
      "provider": "slack",
      "extUserId": "slack_43234",
      "email": "albkov@gmail.com",
      "registered": true,
      "role": "user",
      "id": "6WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "abbn",
      "displayName": "Abby Novak",
      "provider": "linkedin",
      "extUserId": "linkedin_98438",
      "email": "abbn@slack.com",
      "registered": true,
      "role": "user",
      "id": "7WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "gego",
      "displayName": "George Gova",
      "provider": "linkedin",
      "extUserId": "linkedin_338472",
      "email": "gego@yahoo.com",
      "registered": true,
      "role": "user",
      "id": "8WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "dwalsh",
      "displayName": "Diego Walsh",
      "provider": "slack",
      "extUserId": "slack_00832",
      "email": "dwalsh@aol.com",
      "registered": true,
      "role": "user",
      "id": "9WHI3l5oetN1NXIP",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "lastLoginAt": "2020-01-24T23:17:43.004Z"
    },
    {
      "username": "fredric.murphy",
      "displayName": "Fredric Murphy",
      "provider": "facebook",
      "id": "8si8Su024sj2cZwo0",
      "extUserId": "facebook_10477332",
      "email": "fredric.murphy@gmail.com",
      "registered": true,
      "role": "admin",
      "createdAt": "2020-01-01T00:00:00.000Z",
      "lastLoginAt": "2020-01-01T00:00:00.000Z"
    }
  ],
  "admin,battles": [
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "1QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "userA/ai001 vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "2QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "alpha/maveric vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "3QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "beta/mayday3 vs alpha/maveric"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "4QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "userA/ai001 vs beta/mayday3"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "5QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "userA/ai001 vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "6QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "alpha/maveric vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "7QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "geog9/alan9 vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "8QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "userA/ai001 vs brody/xx9a"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "9QCTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "geog9/alan9 vs brody/xx9a"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "11CTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "userA/ai001 vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "12CTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "alpha/maveric vs tonny/bee87"
    },
    {
      "ubd": "{\"version\":3,\"rngSeed\":0.8186448997231914,\"teamMode\":false,\"timeLimit\":0,\"aiList\":[{\"name\":\"jamro\",\"team\":\"2m9po29ef\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"kamikaze\",\"team\":\"97y2ckbx\",\"code\":null,\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}",
      "id": "13CTzInfyJTAGm9i",
      "createdAt": "2020-01-24T23:17:43.004Z",
      "expiresAt": "2020-01-27T23:17:43.004Z",
      "description": "geog9/alan9 vs brody/xx9a"
    }
  ],
  "user,initData": {
    "id": "cWzaLP12eSeDL68F",
    "username": "mock",
    "displayName": "Mock User",
    "provider": "mock",
    "extUserId": "mock_01",
    "email": "mock@example.com",
    "role": "admin",
    "registered": true,
    "createdAt": "2020-02-21T16:42:47.432Z",
    "lastLoginAt": "2020-02-21T16:42:47.437Z"
  },
  "user,scripts": [
    {
      "id": "FOjJ3IULPVU9KSWw",
      "ownerId": "cWzaLP12eSeDL68F",
      "ownerName": "mock",
      "scriptName": "peridot",
      "namespace": "user",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\t// write your tank logic here\n  \n});\n\n\n",
      "createdAt": "2020-02-23T08:27:42.940Z",
      "modifiedAt": "2020-02-23T08:27:42.940Z"
    },
    {
      "id": "xVDPu2zXl9M4lINa",
      "ownerId": "cWzaLP12eSeDL68F",
      "ownerName": "mock",
      "scriptName": "nihnae",
      "namespace": "user",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\t// write your tank logic here\n  \n});\n\n\n",
      "createdAt": "2020-02-23T08:26:54.011Z",
      "modifiedAt": "2020-02-23T08:26:54.011Z"
    },
    {
      "id": "BuLO667PXk0yEqwg",
      "ownerId": "cWzaLP12eSeDL68F",
      "ownerName": "mock",
      "scriptName": "monkey",
      "namespace": "user",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\t// write your tank logic here\n  \n});\n\n\n",
      "createdAt": "2020-02-23T08:28:04.922Z",
      "modifiedAt": "2020-02-23T08:28:04.922Z"
    }
  ],
  "user,challenges": [
    {
      "id": "challenge-8UCUaNvC",
      "challengeId": "challenge-8UCUaNvC",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\tcontrol.DEBUG = {msg: 'hello from 1st challenge'}\n  \n});\n\n\n",
      "completed": true
    },
    {
      "id": "challenge-Du7tyrCB",
      "challengeId": "challenge-Du7tyrCB",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\tcontrol.DEBUG = {msg: 'how to solve that?'}\n  \n});\n\n\n",
      "completed": false
    },
    {
      "id": "challenge-4syTf6ph",
      "challengeId": "challenge-4syTf6ph",
      "code": "importScripts('lib/tank.js');\n\n// Don't know where to start?\n// Read Getting Started in \"Docs\" section \n\ntank.init(function(settings, info) {\n\t// initialize tank here\n  \n});\n\ntank.loop(function(state, control) {\n\tcontrol.DEBUG = {msg: 'locked'}\n  \n});\n\n\n",
      "completed": false
    }
  ],
  "user,league,submission": {
    "id": "U7aO66layk0yEqwg",
    "scriptId": "xVDPu2zXl9M4lINa",
    "ownerId": "cWzaLP12eSeDL68F",
    "ownerName": "mock",
    "scriptName": "nihnae",
    "joinedAt": "2020-02-23T08:27:42.940Z",
    "rank": 1,
    "fights_total": 343,
    "fights_win": 128,
    "fights_lose": 43,
    "score": 1092,
    "history": [

    ]
  },
  "user,league,replay": [
  {"_id":"5ed108bfdf088a19fb84fa77","id":"5ed108bfdf088a19fb84fa77","createdAt":"2020-05-29T13:06:07.890Z","expiresAt":"2020-05-29T14:06:07.890Z","ubd":"{\"version\":3,\"rngSeed\":0.6492123242742991,\"teamMode\":true,\"timeLimit\":20000,\"aiList\":[{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}","description":"jsbattle/crawler vs jsbattle/chicken","meta":[{"id":"5ecd06d60b7fda5799e71069","name":"jsbattle/crawler","battleScore":92.55,"winner":false},{"id":"5ecd06d60b7fda5799e71068","name":"jsbattle/chicken","battleScore":306.8099999999994,"winner":true}]}
  ],
  "leaguePreview,replay": [
  {"_id":"5ed108bfdf088a19fb84fa77","id":"5ed108bfdf088a19fb84fa77","createdAt":"2020-05-29T13:06:07.890Z","expiresAt":"2020-05-29T14:06:07.890Z","ubd":"{\"version\":3,\"rngSeed\":0.6492123242742991,\"teamMode\":true,\"timeLimit\":20000,\"aiList\":[{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"crawler\",\"team\":\"jsbattle/crawler\",\"code\":\"importScripts('lib/tank.js');\\n\\nvar turnDirection, turnTimer;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'tiger';\\n  // the direction where tank will turning.\\n  // 1 is clockwise, -1 is couter clockwise\\n  turnDirection = Math.random() < 0.5 ? 1 : -1;\\n  turnTimer = Math.round(Math.randomRange(0, 30));\\n});\\n\\ntank.loop(function(state, control) {\\n\\n  // when hit an obstacle, start turning until\\n  // time of turnTimer doesn't run out\\n  if(state.collisions.wall || state.collisions.enemy || state.collisions.ally) {\\n    turnTimer = Math.round(Math.randomRange(20, 50));\\n  }\\n  if(turnTimer > 0) {\\n    turnTimer--;\\n    // when turnTimer is on, do not move forward because there is\\n    // probably an obstacle in front of you. Turn instead.\\n    control.THROTTLE = 0;\\n    control.TURN = turnDirection;\\n  } else {\\n    // keep going forward at full speed\\n    control.THROTTLE = 1;\\n    control.TURN = 0;\\n  }\\n  // Shoot whenever you see an enemy\\n  if(state.radar.enemy) {\\n    control.SHOOT = 0.5;\\n  }\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100},{\"name\":\"chicken\",\"team\":\"jsbattle/chicken\",\"code\":\"importScripts('lib/tank.js');\\n\\n/* moves tank in defined direction\\n* @param targetAngle - direction of movement\\n* @param state - state object of the tank\\n* @param control - control object of the tank\\n* @param done - callback executed when tank is close to the wall and the movement is over\\n*/\\nfunction goToDirection(targetAngle, state, control, done) {\\n  var angleDelta = Math.deg.normalize(targetAngle - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  // use boost to hide in corner ASAP\\n  control.BOOST = 1;\\n\\n  // if any enemy on the radar - shoot!\\n  if(state.radar.enemy) {\\n    control.SHOOT = 1;\\n  } else {\\n    control.SHOOT = 0;\\n  }\\n\\n  if(Math.abs(angleDelta) < 5) {\\n    // do not move forward if a tank is on your way\\n    if(state.collisions.enemy || state.collisions.ally) {\\n      control.THROTTLE = 0;\\n    } else {\\n      control.THROTTLE = 1;\\n    }\\n    // finish movement when close to a wall\\n    if(state.radar.wallDistance && state.radar.wallDistance < 50) {\\n      control.THROTTLE = 0;\\n      control.TURN = 0;\\n      control.BOOST = 0;\\n      done();\\n    }\\n  }\\n}\\n\\n// strategy of moving north/south\\n// used at the beginning to go close to a wall\\nfunction goVerticalStrategy(state, control) {\\n  goToDirection(verticalAngle, state, control, function() {\\n    // when done - go to a corner\\n    strategy = goHorizontalStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goVerticalStrategy:\\\" + verticalAngle;\\n}\\n\\n// strategy of moving east/west\\n// used when you are close to the wall so you can find a corner\\nfunction goHorizontalStrategy(state, control) {\\n  goToDirection(horizontalAngle, state, control, function() {\\n    // when done - start shooting\\n    strategy = shootStrategy;\\n  });\\n  control.DEBUG.strategy = \\\"goHorizontalStrategy:\\\" + horizontalAngle;\\n}\\n\\n// shoot wave of bullets\\nfunction shootStrategy(state, control) {\\n  // 20*Math.sin(timer*0.1) cause rotation +-20 degrees over the time\\n  var angleDelta = Math.deg.normalize(shootAngle + 20*Math.sin(timer*0.1) - state.angle);\\n  control.TURN = angleDelta * 0.2;\\n  control.SHOOT = 0.1;\\n  control.DEBUG.strategy = \\\"shootStrategy:\\\" + shootAngle;\\n}\\n\\n\\n// strategy function that is currently used\\nvar strategy;\\n\\n// random direction of the tank that results in vertical movement (north or south)\\nvar verticalAngle;\\n// random direction of the tank that results in horizontal movement (east or west)\\nvar horizontalAngle;\\n// best direction to shoot when the tank is hidden i battlefield's corner\\nvar shootAngle;\\n// timer used to change shooting angle over the time\\nvar timer = 0;\\n\\ntank.init(function(settings, info) {\\n  settings.SKIN = 'desert';\\n\\n  // randomize direction of tank movement\\n  verticalAngle = Math.random() < 0.5 ? -90 : +90;\\n  horizontalAngle = Math.random() < 0.5 ? 0 : -180;\\n  // find direction that is opposite to the corner where the tank is\\n  shootAngle = Math.deg.normalize(verticalAngle + horizontalAngle)/2;\\n  if(horizontalAngle == 0) {\\n    shootAngle += 180;\\n  }\\n\\n  // start from moving north/south\\n  strategy = goVerticalStrategy;\\n});\\n\\ntank.loop(function(state, control) {\\n  // execute current strategy\\n  strategy(state, control);\\n  timer++;\\n});\\n\",\"initData\":null,\"useSandbox\":true,\"executionLimit\":100}]}","description":"jsbattle/crawler vs jsbattle/chicken","meta":[{"id":"5ecd06d60b7fda5799e71069","name":"jsbattle/crawler","battleScore":92.55,"winner":false},{"id":"5ecd06d60b7fda5799e71068","name":"jsbattle/chicken","battleScore":306.8099999999994,"winner":true}]}
  ],
  "user,league": {
    "submission": {
      "id": "U7aO66layk0yEqwg",
      "scriptId": "xVDPu2zXl9M4lINa",
      "ownerId": "cWzaLP12eSeDL68F",
      "ownerName": "mock",
      "scriptName": "nihnae",
      "joinedAt": "2020-02-23T08:27:42.940Z",
      "rank": 1,
      "fights_total": 343,
      "fights_win": 128,
      "fights_lose": 43,
      "score": 1092,
      "history": [
        {
            "id": "5ed108bfdf088a19fb84fa77",
            "createdAt": "2020-04-01T12:34:49.940Z",
            "players": [
                {
                    "id": "U7aO66layk0yEqwg",
                    "name": "mock/nihnae",
                    "winner": true
                },
                {
                    "id": "wEnX0XSEfAIPmyOi",
                    "name": "jsbattle/chicken",
                    "winner": false
                }
            ]
        },
        {
            "id": "ORhzc8LFEoUhZg2N",
            "createdAt": "2020-04-01T12:34:48.940Z",
            "players": [
                {
                    "id": "pMaaEfDjmw65gQKR",
                    "name": "jsbattle/dodge",
                    "winner": true
                },
                {
                    "id": "U7aO66layk0yEqwg",
                    "name": "mock/nihnae",
                    "winner": false
                }
            ]
        }
      ]
    },
    "ranktable": [
      {
        "id": "hjkKvy79ahj34",
        "scriptId": "asdf772db8q9fasdo",
        "ownerId": "jnfao8y9ascdy",
        "ownerName": "Allegro",
        "scriptName": "killa-8",
        "joinedAt": "2020-01-28T10:27:42.940Z",
        "rank": 1,
        "fights_total": 343,
        "fights_win": 128,
        "fights_lose": 43,
        "score": 1092
      },
      {
        "id": "U7aO66layk0yEqwg",
        "scriptId": "xVDPu2zXl9M4lINa",
        "ownerId": "cWzaLP12eSeDL68F",
        "ownerName": "jerome",
        "scriptName": "nihnae",
        "joinedAt": "2020-02-23T08:27:42.940Z",
        "rank": 2,
        "fights_total": 342,
        "fights_win": 50,
        "fights_lose": 122,
        "score": 1092
      },
      {
        "id": "jhsadf90y79a3",
        "scriptId": "h84323adsfia98",
        "ownerId": "fash4u39awfh2349b",
        "ownerName": "monk",
        "scriptName": "3ll3a",
        "joinedAt": "2020-04-01T12:34:42.940Z",
        "rank": 3,
        "fights_total": 354,
        "fights_win": 128,
        "fights_lose": 43,
        "score": 1092
      }
    ],
    "history": [
        {
            "id": "5ed108bfdf088a19fb84fa77",
            "createdAt": "2020-04-01T12:34:49.940Z",
            "players": [
                {
                    "id": "DmYdtErQJnZGpp9y",
                    "name": "jsbattle/crawler",
                    "winner": true
                },
                {
                    "id": "wEnX0XSEfAIPmyOi",
                    "name": "jsbattle/chicken",
                    "winner": false
                }
            ]
        },
        {
            "id": "ORhzc8LFEoUhZg2N",
            "createdAt": "2020-04-01T12:34:48.940Z",
            "players": [
                {
                    "id": "pMaaEfDjmw65gQKR",
                    "name": "jsbattle/dodge",
                    "winner": true
                },
                {
                    "id": "DmYdtErQJnZGpp9y",
                    "name": "jsbattle/crawler",
                    "winner": false
                }
            ]
        },
        {
            "id": "QokqNqarUwI1lxpo",
            "createdAt": "2020-04-01T12:34:47.940Z",
            "players": [
                {
                    "id": "iVl94fUAOiXXGm3H",
                    "name": "jsbattle/sniper",
                    "winner": false
                },
                {
                    "id": "ME1DpnV8uHet6tjl",
                    "name": "jsbattle/kamikaze",
                    "winner": true
                }
            ]
        },
        {
            "id": "misNbE35uRlw43kM",
            "createdAt": "2020-04-01T12:34:46.940Z",
            "players": [
                {
                    "id": "pMaaEfDjmw65gQKR",
                    "name": "jsbattle/dodge",
                    "winner": true
                },
                {
                    "id": "wEnX0XSEfAIPmyOi",
                    "name": "jsbattle/chicken",
                    "winner": false
                }
            ]
        },
        {
            "id": "op6qpAicpDB88qq5",
            "createdAt": "2020-04-01T12:34:45.940Z",
            "players": [
                {
                    "id": "13zCqjrThAGrw2vf",
                    "name": "jsbattle/jamro",
                    "winner": false
                },
                {
                    "id": "pMaaEfDjmw65gQKR",
                    "name": "jsbattle/dodge",
                    "winner": false
                }
            ]
        },
        {
            "id": "sVFjmG406YnTSUa5",
            "createdAt": "2020-04-01T12:34:44.940Z",
            "players": [
                {
                    "id": "iVl94fUAOiXXGm3H",
                    "name": "jsbattle/sniper",
                    "winner": true
                },
                {
                    "id": "DmYdtErQJnZGpp9y",
                    "name": "jsbattle/crawler",
                    "winner": false
                }
            ]
        },
        {
            "id": "RTS41R2bY2XBaRb5",
            "createdAt": "2020-04-01T12:34:43.940Z",
            "players": [
                {
                    "id": "DmYdtErQJnZGpp9y",
                    "name": "jsbattle/crawler",
                    "winner": true
                },
                {
                    "id": "Q4W23fZ49j84nRQa",
                    "name": "jsbattle/crazy",
                    "winner": false
                }
            ]
        }
    ]
  },
  "leaguePreview": [
      {
          "id": "5ed108bfdf088a19fb84fa77",
          "createdAt": "2020-04-01T12:34:49.940Z",
          "players": [
              {
                  "id": "DmYdtErQJnZGpp9y",
                  "name": "jsbattle/crawler",
                  "winner": true
              },
              {
                  "id": "wEnX0XSEfAIPmyOi",
                  "name": "jsbattle/chicken",
                  "winner": false
              }
          ]
      },
      {
          "id": "ORhzc8LFEoUhZg2N",
          "createdAt": "2020-04-01T12:34:48.940Z",
          "players": [
              {
                  "id": "pMaaEfDjmw65gQKR",
                  "name": "jsbattle/dodge",
                  "winner": true
              },
              {
                  "id": "DmYdtErQJnZGpp9y",
                  "name": "jsbattle/crawler",
                  "winner": false
              }
          ]
      },
      {
          "id": "QokqNqarUwI1lxpo",
          "createdAt": "2020-04-01T12:34:47.940Z",
          "players": [
              {
                  "id": "iVl94fUAOiXXGm3H",
                  "name": "jsbattle/sniper",
                  "winner": false
              },
              {
                  "id": "ME1DpnV8uHet6tjl",
                  "name": "jsbattle/kamikaze",
                  "winner": true
              }
          ]
      },
      {
          "id": "misNbE35uRlw43kM",
          "createdAt": "2020-04-01T12:34:46.940Z",
          "players": [
              {
                  "id": "pMaaEfDjmw65gQKR",
                  "name": "jsbattle/dodge",
                  "winner": true
              },
              {
                  "id": "wEnX0XSEfAIPmyOi",
                  "name": "jsbattle/chicken",
                  "winner": false
              }
          ]
      },
      {
          "id": "op6qpAicpDB88qq5",
          "createdAt": "2020-04-01T12:34:45.940Z",
          "players": [
              {
                  "id": "13zCqjrThAGrw2vf",
                  "name": "jsbattle/jamro",
                  "winner": false
              },
              {
                  "id": "pMaaEfDjmw65gQKR",
                  "name": "jsbattle/dodge",
                  "winner": false
              }
          ]
      },
      {
          "id": "sVFjmG406YnTSUa5",
          "createdAt": "2020-04-01T12:34:44.940Z",
          "players": [
              {
                  "id": "iVl94fUAOiXXGm3H",
                  "name": "jsbattle/sniper",
                  "winner": true
              },
              {
                  "id": "DmYdtErQJnZGpp9y",
                  "name": "jsbattle/crawler",
                  "winner": false
              }
          ]
      },
      {
          "id": "RTS41R2bY2XBaRb5",
          "createdAt": "2020-04-01T12:34:43.940Z",
          "players": [
              {
                  "id": "DmYdtErQJnZGpp9y",
                  "name": "jsbattle/crawler",
                  "winner": true
              },
              {
                  "id": "Q4W23fZ49j84nRQa",
                  "name": "jsbattle/crazy",
                  "winner": false
              }
          ]
      }
  ],
  "authMethods": {
    "mock": {
      "name": "Mock",
      "url": "/auth/mock"
    },
    "github": {
      "name": "GitHub",
      "url": "/auth/github"
    },
    "facebook": {
      "name": "Facebook",
      "url": "/auth/facebook"
    },
    "google": {
      "name": "Google",
      "url": "/auth/google"
    }
  },
  "profile": {
    "id": "cWzaLP12eSeDL68F",
    "username": "mock",
    "displayName": "Mock User",
    "provider": "mock",
    "extUserId": "mock_01",
    "email": "mock@example.com",
    "role": "admin",
    "registered": true,
    "createdAt": "2020-02-21T16:42:47.432Z",
    "lastLoginAt": "2020-02-21T16:42:47.437Z"
  }
}
