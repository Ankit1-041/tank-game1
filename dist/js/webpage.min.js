var webpage =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var App = __webpack_require__(1);

	ReactDOM.render(React.createElement(App, { renderer: 'brody' }), document.getElementById('root'));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Row = __webpack_require__(2);
	var FullRow = __webpack_require__(3);
	var Col = __webpack_require__(4);
	var InfoBox = __webpack_require__(5);
	var Cover = __webpack_require__(6);
	var DebugView = __webpack_require__(10);
	var ScoreBoard = __webpack_require__(13);
	var Navi = __webpack_require__(15);
	var Battlefield = __webpack_require__(16);
	var BootstrapRWD = __webpack_require__(17);

	module.exports = function (_React$Component) {
	  _inherits(App, _React$Component);

	  function App(props) {
	    _classCallCheck(this, App);

	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

	    var simSpeed = localStorage.getItem("settings.simSpeed");
	    simSpeed = simSpeed ? simSpeed : 1;
	    var simQuality = localStorage.getItem("settings.quality");
	    simQuality = simQuality ? simQuality : "auto";
	    _this.renderer = null;
	    _this.simulation = null;
	    _this.canvas = null;
	    _this.rwd = new BootstrapRWD();
	    _this.state = {
	      errorMessage: null,
	      simSpeed: simSpeed,
	      simQuality: simQuality,
	      phase: "loading",
	      winner: null,
	      timeLeft: 0,
	      tankList: [],
	      quality: 1,
	      windowSize: 'md'
	    };
	    return _this;
	  }

	  _createClass(App, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      this.buildSimulation();
	      var self = this;

	      this.rwd.onChange(function (s) {
	        return _this2.setState({ windowSize: s });
	      });
	      this.setState({ windowSize: this.rwd.size });
	    }
	  }, {
	    key: 'startBattle',
	    value: function startBattle() {
	      this.simulation.start();
	      this.setState({ phase: 'battle' });
	    }
	  }, {
	    key: 'restartBattle',
	    value: function restartBattle() {
	      this.setState({ phase: 'loading', tankList: [] });
	      this.buildSimulation();
	    }
	  }, {
	    key: 'buildSimulation',
	    value: function buildSimulation() {
	      var _this3 = this;

	      this.renderer = JsBattle.createRenderer(this.props.renderer);
	      this.renderer.loadAssets(function () {
	        return _this3.onAssetsLoaded();
	      });
	    }
	  }, {
	    key: 'onAssetsLoaded',
	    value: function onAssetsLoaded() {
	      var _this4 = this;

	      var self = this;
	      this.renderer.init(this.canvas);
	      this.simulation = JsBattle.createSimulation(this.renderer);

	      this.simulation.onError(function (msg) {
	        return _this4.showError(msg);
	      });
	      this.simulation.init(900, 600);

	      this.simulation.onRender(function () {
	        return _this4.updateTankList();
	      });
	      this.simulation.setSpeed(this.state.simSpeed);
	      this.simulation.setRendererQuality(this.state.simQuality);

	      this.simulation.onFinish(function () {
	        _this4.updateTankList();

	        var winner = null;
	        for (var i in self.simulation.tankList) {
	          var tank = self.simulation.tankList[i];
	          if (!winner || tank.score > winner.score) {
	            winner = tank;
	          }
	        }
	        self.setState({ timeLeft: self.simulation.timeLimit - self.simulation.timeElapsed });

	        self.setState({ winner: winner });

	        var keepRendering = setInterval(function () {
	          self.renderer.preRender();
	          self.renderer.postRender();
	        }, 30);
	        setTimeout(function () {
	          clearInterval(keepRendering);
	          self.setState({ phase: 'winner' });
	        }, 500);
	      });

	      this.setState({ phase: 'loading' });

	      $.getJSON("js/tanks/index.json", function (data) {
	        data.forEach(function (tankName) {
	          self.simulation.addTank(tankName);
	          $('#sim-loading').hide();
	          $('#sim-start').show();
	        });

	        self.setState({
	          phase: 'start'
	        });
	        self.updateTankList();
	      }).fail(function () {
	        self.showError("Cannot load and parse js/tanks/index.json");
	      });
	    }
	  }, {
	    key: 'updateTankList',
	    value: function updateTankList() {
	      var tankList = this.simulation.tankList.map(function (tank) {
	        return {
	          id: tank.id,
	          name: tank.fullName,
	          debug: tank.debugData,
	          state: tank.state,
	          score: tank.score,
	          energy: tank.energy
	        };
	      });
	      tankList.sort(function (a, b) {
	        return b.score - a.score;
	      });
	      for (var rank = 0; rank < tankList.length; rank++) {
	        tankList[rank].rank = rank;
	      }
	      this.setState({
	        tankList: tankList,
	        quality: this.renderer.quality
	      });
	    }
	  }, {
	    key: 'showError',
	    value: function showError(msg) {
	      this.setState({ errorMessage: msg });
	    }
	  }, {
	    key: 'setSimulationSpeed',
	    value: function setSimulationSpeed(v) {
	      this.setState({ simSpeed: v });
	      localStorage.setItem("settings.simSpeed", v);
	      if (this.simulation) {
	        this.simulation.setSpeed(v);
	      }
	    }
	  }, {
	    key: 'setSimulationQuality',
	    value: function setSimulationQuality(v) {
	      this.setState({ simQuality: v });
	      localStorage.setItem("settings.quality", v);
	      if (this.simulation) {
	        this.simulation.setRendererQuality(v);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this5 = this;

	      var scoreboard = React.createElement(ScoreBoard, {
	        tankList: this.state.tankList,
	        refreshTime: 200 + 1300 * (1 - this.state.quality)
	      });
	      var debugView = React.createElement(DebugView, {
	        visible: true,
	        tankList: this.state.tankList,
	        highlight: this.state.quality > 0.66
	      });
	      var fpsWarn = React.createElement(InfoBox, {
	        message: 'Animation refresh rate was reduced to increase speed of the battle. You can adjust quality setting in the top bar',
	        title: 'FPS reduced',
	        level: 'warning'
	      });
	      if (this.state.phase == 'battle' && this.state.quality <= 0.05) {
	        scoreboard = React.createElement(InfoBox, { message: 'Scoreboard hidden to improve performance of battle simulation', title: ' ', level: 'info' });
	        debugView = React.createElement(InfoBox, { message: 'Debug View hidden to improve performance of battle simulation', title: ' ', level: 'info' });
	      }
	      if (this.state.phase == 'loading') {
	        scoreboard = null;
	        debugView = null;
	      }
	      if (this.state.quality >= 0.3 || this.state.phase != 'battle') {
	        fpsWarn = null;
	      }
	      return React.createElement(
	        'div',
	        null,
	        React.createElement(Navi, {
	          speed: this.state.simSpeed,
	          quality: this.state.simQuality,
	          onSpeedChange: function onSpeedChange(v) {
	            return _this5.setSimulationSpeed(v);
	          },
	          onQualityChange: function onQualityChange(v) {
	            return _this5.setSimulationQuality(v);
	          }
	        }),
	        React.createElement(
	          FullRow,
	          null,
	          React.createElement(InfoBox, { message: this.state.errorMessage, level: 'danger' }),
	          fpsWarn
	        ),
	        React.createElement(
	          Row,
	          null,
	          React.createElement(
	            Col,
	            { lg: 8, md: 8, sm: 12 },
	            React.createElement(Battlefield, {
	              ref: function ref(battlefield) {
	                return _this5.canvas = battlefield ? battlefield.canvas : null;
	              },
	              width: '900',
	              height: '600',
	              visible: this.state.phase == "battle"
	            }),
	            React.createElement(Cover, {
	              phase: this.state.phase,
	              onStart: function onStart() {
	                return _this5.startBattle();
	              },
	              onRestart: function onRestart() {
	                return _this5.restartBattle();
	              },
	              winner: this.state.winner,
	              timeLeft: this.state.timeLeft
	            }),
	            this.rwd.equalOrBiggerThan('md') ? scoreboard : null
	          ),
	          React.createElement(
	            Col,
	            { lg: 4, md: 4, sm: 12 },
	            debugView
	          )
	        ),
	        React.createElement(
	          FullRow,
	          null,
	          this.rwd.smallerThan('md') ? scoreboard : null
	        )
	      );
	    }
	  }]);

	  return App;
	}(React.Component);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(Row, _React$Component);

	  function Row() {
	    _classCallCheck(this, Row);

	    return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
	  }

	  _createClass(Row, [{
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        { className: "row" },
	        this.props.children
	      );
	    }
	  }]);

	  return Row;
	}(React.Component);

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Col = __webpack_require__(4);
	module.exports = function (_React$Component) {
	  _inherits(FullRow, _React$Component);

	  function FullRow() {
	    _classCallCheck(this, FullRow);

	    return _possibleConstructorReturn(this, (FullRow.__proto__ || Object.getPrototypeOf(FullRow)).apply(this, arguments));
	  }

	  _createClass(FullRow, [{
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        { className: "row" },
	        React.createElement(
	          Col,
	          { xs: 12, sm: 12, md: 12, lg: 12 },
	          this.props.children
	        )
	      );
	    }
	  }]);

	  return FullRow;
	}(React.Component);

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(Col, _React$Component);

	  function Col() {
	    _classCallCheck(this, Col);

	    return _possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).apply(this, arguments));
	  }

	  _createClass(Col, [{
	    key: "render",
	    value: function render() {
	      var classList = [];
	      if (this.props.xs) classList.push("col-xs-" + this.props.xs);
	      if (this.props.sm) classList.push("col-sm-" + this.props.sm);
	      if (this.props.md) classList.push("col-md-" + this.props.md);
	      if (this.props.lg) classList.push("col-lg-" + this.props.lg);
	      if (this.props.extraClass) classList.push(this.props.extraClass);

	      return React.createElement(
	        "div",
	        { className: classList.join(" ") },
	        this.props.children
	      );
	    }
	  }]);

	  return Col;
	}(React.Component);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(InfoBox, _React$Component);

	  function InfoBox() {
	    _classCallCheck(this, InfoBox);

	    return _possibleConstructorReturn(this, (InfoBox.__proto__ || Object.getPrototypeOf(InfoBox)).apply(this, arguments));
	  }

	  _createClass(InfoBox, [{
	    key: "render",
	    value: function render() {
	      if (!this.props.message) return null;
	      var boxClass = "alert alert-" + this.props.level;
	      return React.createElement(
	        "div",
	        { className: boxClass, role: "alert" },
	        React.createElement(
	          "strong",
	          null,
	          React.createElement("span", { className: "glyphicon glyphicon-info-sign", "aria-hidden": "true" }),
	          "\xA0",
	          this.props.title != "" ? this.props.title : "Oh snap!"
	        ),
	        React.createElement(
	          "span",
	          null,
	          " ",
	          this.props.message
	        )
	      );
	    }
	  }]);

	  return InfoBox;
	}(React.Component);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LoadingScreen = __webpack_require__(7);
	var StartScreen = __webpack_require__(8);
	var WinnerScreen = __webpack_require__(9);

	module.exports = function (_React$Component) {
	  _inherits(Cover, _React$Component);

	  function Cover(props) {
	    _classCallCheck(this, Cover);

	    return _possibleConstructorReturn(this, (Cover.__proto__ || Object.getPrototypeOf(Cover)).call(this, props));
	  }

	  _createClass(Cover, [{
	    key: 'renderContent',
	    value: function renderContent(phase) {
	      switch (phase) {
	        case 'loading':
	          return React.createElement(LoadingScreen, null);
	        case 'start':
	          return React.createElement(StartScreen, { onStart: this.props.onStart });
	        case 'winner':
	          var msg = this.props.timeLeft == 0 ? "Time out! The winner is:" : "And the winner is...";
	          return React.createElement(WinnerScreen, { onRestart: this.props.onRestart, message: msg, winner: this.props.winner });
	        default:
	          return null;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var content = this.renderContent(this.props.phase);
	      if (!content) return null;
	      return React.createElement(
	        'div',
	        { className: 'text-center cover' },
	        React.createElement(
	          'div',
	          null,
	          content
	        )
	      );
	    }
	  }]);

	  return Cover;
	}(React.Component);

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(LoadingScreen, _React$Component);

	  function LoadingScreen() {
	    _classCallCheck(this, LoadingScreen);

	    return _possibleConstructorReturn(this, (LoadingScreen.__proto__ || Object.getPrototypeOf(LoadingScreen)).apply(this, arguments));
	  }

	  _createClass(LoadingScreen, [{
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        null,
	        React.createElement(
	          "button",
	          { type: "button", className: "btn btn-lg", disabled: "disabled" },
	          React.createElement("span", { className: "glyphicon glyphicon-refresh", "aria-hidden": "true" }),
	          " LOADING..."
	        )
	      );
	    }
	  }]);

	  return LoadingScreen;
	}(React.Component);

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(StartScreen, _React$Component);

	  function StartScreen() {
	    _classCallCheck(this, StartScreen);

	    return _possibleConstructorReturn(this, (StartScreen.__proto__ || Object.getPrototypeOf(StartScreen)).apply(this, arguments));
	  }

	  _createClass(StartScreen, [{
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        null,
	        React.createElement(
	          "button",
	          { type: "button", className: "btn btn-primary btn-lg", onClick: this.props.onStart },
	          React.createElement("span", { className: "glyphicon glyphicon-play", "aria-hidden": "true" }),
	          " START"
	        )
	      );
	    }
	  }]);

	  return StartScreen;
	}(React.Component);

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(WinnerScreen, _React$Component);

	  function WinnerScreen() {
	    _classCallCheck(this, WinnerScreen);

	    return _possibleConstructorReturn(this, (WinnerScreen.__proto__ || Object.getPrototypeOf(WinnerScreen)).apply(this, arguments));
	  }

	  _createClass(WinnerScreen, [{
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "div",
	        { className: "sim-finish" },
	        React.createElement(
	          "h3",
	          null,
	          React.createElement(
	            "small",
	            null,
	            this.props.message
	          ),
	          React.createElement("br", null),
	          " ",
	          React.createElement(
	            "strong",
	            null,
	            this.props.winner ? this.props.winner.fullName : ""
	          ),
	          "!"
	        ),
	        React.createElement(
	          "button",
	          { type: "button", className: "btn btn-primary btn-lg", onClick: this.props.onRestart },
	          React.createElement("span", { className: "glyphicon glyphicon-refresh", "aria-hidden": "true" }),
	          " RESTART"
	        )
	      );
	    }
	  }]);

	  return WinnerScreen;
	}(React.Component);

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var JsonCode = __webpack_require__(11);
	var UnfreshComponent = __webpack_require__(12);

	module.exports = function (_UnfreshComponent) {
	  _inherits(DebugView, _UnfreshComponent);

	  function DebugView(props) {
	    _classCallCheck(this, DebugView);

	    var _this = _possibleConstructorReturn(this, (DebugView.__proto__ || Object.getPrototypeOf(DebugView)).call(this, props));

	    var debugTankId = localStorage.getItem("settings.debugTankId");
	    debugTankId = debugTankId ? debugTankId : 0;
	    _this.state = {
	      debugId: debugTankId
	    };
	    return _this;
	  }

	  _createClass(DebugView, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(DebugView.prototype.__proto__ || Object.getPrototypeOf(DebugView.prototype), 'componentDidMount', this).call(this);
	      if (this.props.onSelect) {
	        this.props.onSelect(this.state.debugId);
	      }
	    }
	  }, {
	    key: 'renderOptions',
	    value: function renderOptions() {
	      if (!this.props.tankList) return null;
	      var result = this.props.tankList.map(function (tank) {
	        return React.createElement(
	          'option',
	          { key: tank.id, value: tank.id },
	          tank.name
	        );
	      });
	      result.sort(function (a, b) {
	        return Number(a.key) - Number(b.key);
	      });
	      return result;
	    }
	  }, {
	    key: 'findDebugTank',
	    value: function findDebugTank() {
	      if (this.state.debugId == 0) return null;
	      var self = this;
	      return this.props.tankList.find(function (tank) {
	        return tank.id == self.state.debugId;
	      });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(e) {
	      this.setState({ debugId: e.target.value, forceChange: true });
	      localStorage.setItem("settings.debugTankId", e.target.value);
	      if (this.props.onSelect) {
	        this.props.onSelect(e.target.value);
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      if (nextProps.tankList && this.props.tankList && nextProps.tankList.length != this.props.tankList.length) {
	        return true;
	      }
	      return _get(DebugView.prototype.__proto__ || Object.getPrototypeOf(DebugView.prototype), 'shouldComponentUpdate', this).call(this, nextProps, nextState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      if (!this.props.visible) return null;

	      var debugPanel = null;
	      var debugTank = this.findDebugTank();
	      if (debugTank) {
	        debugPanel = React.createElement(
	          'div',
	          { className: 'panel-body debug-container' },
	          React.createElement(
	            'small',
	            null,
	            'Debug Data'
	          ),
	          React.createElement(JsonCode, { className: 'debug', highlight: this.props.highlight, data: debugTank.debug ? debugTank.debug : {} }),
	          React.createElement(
	            'small',
	            null,
	            'State Object'
	          ),
	          React.createElement(JsonCode, { className: 'debug', highlight: this.props.highlight, data: debugTank.state ? debugTank.state : {} })
	        );
	      }

	      return React.createElement(
	        'div',
	        { className: 'panel panel-default' },
	        React.createElement(
	          'div',
	          { className: 'panel-heading' },
	          React.createElement(
	            'select',
	            { className: 'form-control', value: this.state.debugId, onChange: function onChange(e) {
	                return _this2.onChange(e);
	              } },
	            React.createElement(
	              'option',
	              { value: '0' },
	              '[Select Tank for Debug View]'
	            ),
	            this.renderOptions()
	          )
	        ),
	        debugPanel
	      );
	    }
	  }]);

	  return DebugView;
	}(UnfreshComponent);

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(JsonCode, _React$Component);

	  function JsonCode() {
	    _classCallCheck(this, JsonCode);

	    return _possibleConstructorReturn(this, (JsonCode.__proto__ || Object.getPrototypeOf(JsonCode)).apply(this, arguments));
	  }

	  _createClass(JsonCode, [{
	    key: "formatJSON",
	    value: function formatJSON(data, indent, path) {
	      var i, txt, lineBreak, newIndent;
	      if (!indent) indent = React.createElement("span", null);
	      if (!path) path = "";
	      if (typeof data == 'string') {
	        return React.createElement(
	          "span",
	          { className: "hljs-string" },
	          "\"",
	          data,
	          "\""
	        );
	      }
	      if (typeof data == 'number') {
	        data = data.toFixed(4);
	        while (data.length > 2 && data.charAt(data.length - 1) == '0' && data.charAt(data.length - 2) != '.') {
	          data = data.substring(0, data.length - 1);
	        }
	        data = data == '-0.0' ? '0' : data;
	        return React.createElement(
	          "span",
	          { className: "hljs-number" },
	          data
	        );
	      }
	      if (typeof data == 'boolean') {
	        return React.createElement(
	          "span",
	          { className: "hljs-literal" },
	          data ? "true" : "false"
	        );
	      }
	      if (typeof data == 'undefined') {
	        return React.createElement(
	          "span",
	          { className: "hljs-literal" },
	          "undefined"
	        );
	      }
	      if (data === null) {
	        return React.createElement(
	          "span",
	          { className: "hljs-literal" },
	          "null"
	        );
	      }
	      if ((typeof data === "undefined" ? "undefined" : _typeof(data)) == 'object' && Array.isArray(data)) {
	        txt = [];
	        newIndent = React.createElement(
	          "span",
	          null,
	          indent,
	          "\xA0\xA0"
	        );
	        lineBreak = null;
	        for (i in data) {
	          lineBreak = React.createElement("br", null);
	          txt.push(React.createElement(
	            "span",
	            { key: path + ">" + i },
	            newIndent,
	            this.formatJSON(data[i], newIndent, path + ">" + i),
	            React.createElement("br", null)
	          ));
	        }
	        return React.createElement(
	          "span",
	          null,
	          "[",
	          lineBreak,
	          txt,
	          lineBreak ? indent : null,
	          "]"
	        );
	      }
	      if ((typeof data === "undefined" ? "undefined" : _typeof(data)) == 'object') {
	        txt = [];
	        lineBreak = null;
	        newIndent = React.createElement(
	          "span",
	          null,
	          indent,
	          "\xA0\xA0"
	        );
	        for (i in data) {
	          lineBreak = React.createElement("br", null);
	          txt.push(React.createElement(
	            "span",
	            { key: path + ">" + i },
	            newIndent,
	            React.createElement(
	              "span",
	              { className: "hljs-attr" },
	              i
	            ),
	            ": ",
	            this.formatJSON(data[i], newIndent, path + ">" + i),
	            React.createElement("br", null)
	          ));
	        }
	        return React.createElement(
	          "span",
	          null,
	          "{",
	          lineBreak,
	          txt,
	          lineBreak ? indent : null,
	          "}"
	        );
	      }
	      return React.createElement(
	        "span",
	        null,
	        String(data)
	      );
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var classes = "hljs " + this.props.className;
	      var output = '';
	      if (this.props.highlight) {
	        output = this.formatJSON(this.props.data);
	      } else {
	        output = JSON.stringify(this.props.data, null, 2);
	      }
	      return React.createElement(
	        "pre",
	        { className: classes },
	        output
	      );
	    }
	  }]);

	  return JsonCode;
	}(React.Component);

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(DebugView, _React$Component);

	  function DebugView(props) {
	    _classCallCheck(this, DebugView);

	    var _this = _possibleConstructorReturn(this, (DebugView.__proto__ || Object.getPrototypeOf(DebugView)).call(this, props));

	    _this._unlockChangesLoop = null;
	    _this._preventChanges = false;
	    return _this;
	  }

	  _createClass(DebugView, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.unlockChanges();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this._unlockChangesLoop) {
	        clearTimeout(this._unlockChangesLoop);
	        this._unlockChangesLoop = null;
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      if (this.props.refreshTime && nextProps.refreshTime != this.props.refreshTime) {
	        return true;
	      }

	      if (nextState && nextState.forceChange) {
	        nextState.forceChange = false;
	        return true;
	      }
	      if (this._preventChanges) {
	        return false;
	      } else {
	        this._preventChanges = true;
	        return true;
	      }
	    }
	  }, {
	    key: "unlockChanges",
	    value: function unlockChanges() {
	      if (this._unlockChangesLoop) {
	        clearTimeout(this._unlockChangesLoop);
	      }
	      this._preventChanges = false;
	      var self = this;
	      this._unlockChangesLoop = setTimeout(function () {
	        self.unlockChanges();
	      }, this.props.refreshTime ? this.props.refreshTime : 100);
	    }
	  }]);

	  return DebugView;
	}(React.Component);

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ScoreBoardRow = __webpack_require__(14);
	var UnfreshComponent = __webpack_require__(12);

	module.exports = function (_UnfreshComponent) {
	  _inherits(ScoreBoard, _UnfreshComponent);

	  function ScoreBoard() {
	    _classCallCheck(this, ScoreBoard);

	    return _possibleConstructorReturn(this, (ScoreBoard.__proto__ || Object.getPrototypeOf(ScoreBoard)).apply(this, arguments));
	  }

	  _createClass(ScoreBoard, [{
	    key: 'renderRows',
	    value: function renderRows() {
	      return this.props.tankList.map(function (tank) {
	        return React.createElement(ScoreBoardRow, {
	          key: tank.rank,
	          name: tank.name,
	          energy: tank.energy,
	          score: tank.score
	        });
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      if (nextProps.tankList && this.props.tankList && nextProps.tankList.length != this.props.tankList.length) {
	        return true;
	      }
	      return _get(ScoreBoard.prototype.__proto__ || Object.getPrototypeOf(ScoreBoard.prototype), 'shouldComponentUpdate', this).call(this, nextProps, nextState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return React.createElement(
	        'table',
	        { className: 'table table-condensed' },
	        React.createElement(
	          'thead',
	          null,
	          React.createElement(
	            'tr',
	            null,
	            React.createElement(
	              'th',
	              null,
	              'Tank Name'
	            ),
	            React.createElement(
	              'th',
	              { className: 'text-center' },
	              'Energy'
	            ),
	            React.createElement(
	              'th',
	              { className: 'text-right' },
	              'Score'
	            )
	          )
	        ),
	        React.createElement(
	          'tbody',
	          null,
	          this.renderRows()
	        )
	      );
	    }
	  }]);

	  return ScoreBoard;
	}(UnfreshComponent);

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(ScoreBoardRow, _React$Component);

	  function ScoreBoardRow() {
	    _classCallCheck(this, ScoreBoardRow);

	    return _possibleConstructorReturn(this, (ScoreBoardRow.__proto__ || Object.getPrototypeOf(ScoreBoardRow)).apply(this, arguments));
	  }

	  _createClass(ScoreBoardRow, [{
	    key: "render",
	    value: function render() {
	      var progressStyle = {
	        width: Math.round(this.props.energy) + "%"
	      };
	      return React.createElement(
	        "tr",
	        null,
	        React.createElement(
	          "td",
	          null,
	          this.props.name
	        ),
	        React.createElement(
	          "td",
	          { className: "text-center" },
	          React.createElement(
	            "div",
	            { className: "progress", style: { marginBottom: 0 } },
	            React.createElement(
	              "div",
	              { className: "progress-bar", role: "progressbar", "aria-valuenow": "{Math.round(this.props.energy)}", "aria-valuemin": "0", "aria-valuemax": "100", style: progressStyle },
	              this.props.energy.toFixed(2)
	            )
	          )
	        ),
	        React.createElement(
	          "td",
	          { className: "text-right" },
	          this.props.score.toFixed(2)
	        )
	      );
	    }
	  }]);

	  return ScoreBoardRow;
	}(React.Component);

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(Navi, _React$Component);

	  function Navi(props) {
	    _classCallCheck(this, Navi);

	    var _this = _possibleConstructorReturn(this, (Navi.__proto__ || Object.getPrototypeOf(Navi)).call(this, props));

	    _this.state = {
	      speed: props.speed ? props.speed : 1,
	      quality: props.quality ? props.quality : 1
	    };
	    return _this;
	  }

	  _createClass(Navi, [{
	    key: "speedToName",
	    value: function speedToName(speed) {
	      var label;
	      if (speed < 0.1) label = "Super Slow";else if (speed < 1) label = "Slow";else if (speed == 1) label = "Normal";else if (speed < 3) label = "Fast";else label = "Super Fast";
	      return label;
	    }
	  }, {
	    key: "qualityToName",
	    value: function qualityToName(q) {
	      if (q == 'auto') return 'Auto';
	      var label;
	      if (q < 0.33) label = "Low";else if (q < 0.66) label = "Normal";else label = "High";
	      return label;
	    }
	  }, {
	    key: "renderSpeedButton",
	    value: function renderSpeedButton(speed) {
	      var _this2 = this;

	      var label = this.speedToName(speed);
	      return React.createElement(
	        "li",
	        null,
	        React.createElement(
	          "a",
	          { href: "#", onClick: function onClick() {
	              return _this2.setSpeed(speed);
	            } },
	          label
	        )
	      );
	    }
	  }, {
	    key: "renderQualityButton",
	    value: function renderQualityButton(q) {
	      var _this3 = this;

	      var label = this.qualityToName(q);
	      return React.createElement(
	        "li",
	        null,
	        React.createElement(
	          "a",
	          { href: "#", onClick: function onClick() {
	              return _this3.setQuality(q);
	            } },
	          label
	        )
	      );
	    }
	  }, {
	    key: "setQuality",
	    value: function setQuality(q) {
	      this.setState({ quality: q });
	      this.props.onQualityChange(q);
	    }
	  }, {
	    key: "setSpeed",
	    value: function setSpeed(v) {
	      this.setState({ speed: v });
	      this.props.onSpeedChange(v);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return React.createElement(
	        "nav",
	        { className: "navbar navbar-inverse" },
	        React.createElement(
	          "div",
	          { className: "container-fluid" },
	          React.createElement(
	            "div",
	            { className: "navbar-header" },
	            React.createElement(
	              "button",
	              { type: "button", className: "navbar-toggle collapsed", "data-toggle": "collapse", "data-target": "#bs-example-navbar-collapse-1", "aria-expanded": "false" },
	              React.createElement(
	                "span",
	                { className: "sr-only" },
	                "Toggle navigation"
	              ),
	              React.createElement("span", { className: "icon-bar" }),
	              React.createElement("span", { className: "icon-bar" }),
	              React.createElement("span", { className: "icon-bar" })
	            ),
	            React.createElement(
	              "a",
	              { className: "navbar-brand", href: "#" },
	              React.createElement(
	                "strong",
	                null,
	                "JsBattle"
	              )
	            )
	          ),
	          React.createElement(
	            "div",
	            { className: "collapse navbar-collapse", id: "bs-example-navbar-collapse-1" },
	            React.createElement(
	              "ul",
	              { className: "nav navbar-nav" },
	              React.createElement(
	                "li",
	                null,
	                React.createElement(
	                  "a",
	                  { href: "https://github.com/jamro/jsbattle", target: "_blank" },
	                  React.createElement("i", { className: "fa fa-github-alt", "aria-hidden": "true" }),
	                  " GitHub"
	                )
	              ),
	              React.createElement(
	                "li",
	                null,
	                React.createElement(
	                  "a",
	                  { href: "./docs", target: "_blank" },
	                  React.createElement("i", { className: "fa fa-file-text-o", "aria-hidden": "true" }),
	                  " Docs"
	                )
	              )
	            ),
	            React.createElement(
	              "ul",
	              { className: "nav navbar-nav navbar-right" },
	              React.createElement(
	                "li",
	                { className: "dropdown" },
	                React.createElement(
	                  "a",
	                  { href: "#", className: "dropdown-toggle", "data-toggle": "dropdown", role: "button", "aria-haspopup": "true", "aria-expanded": "false" },
	                  "Quality: ",
	                  this.qualityToName(this.state.quality),
	                  " ",
	                  React.createElement("span", { className: "caret" })
	                ),
	                React.createElement(
	                  "ul",
	                  { className: "dropdown-menu" },
	                  this.renderQualityButton('auto'),
	                  React.createElement("li", { role: "separator", className: "divider" }),
	                  this.renderQualityButton(0.0),
	                  this.renderQualityButton(0.5),
	                  this.renderQualityButton(1.0)
	                )
	              ),
	              React.createElement(
	                "li",
	                { className: "dropdown" },
	                React.createElement(
	                  "a",
	                  { href: "#", className: "dropdown-toggle", "data-toggle": "dropdown", role: "button", "aria-haspopup": "true", "aria-expanded": "false" },
	                  "Speed: ",
	                  this.speedToName(this.state.speed),
	                  " ",
	                  React.createElement("span", { className: "caret" })
	                ),
	                React.createElement(
	                  "ul",
	                  { className: "dropdown-menu" },
	                  this.renderSpeedButton(0.05),
	                  this.renderSpeedButton(0.3),
	                  this.renderSpeedButton(1),
	                  this.renderSpeedButton(2),
	                  this.renderSpeedButton(50)
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Navi;
	}(React.Component);

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	module.exports = function (_React$Component) {
	  _inherits(Battlefield, _React$Component);

	  function Battlefield() {
	    _classCallCheck(this, Battlefield);

	    return _possibleConstructorReturn(this, (Battlefield.__proto__ || Object.getPrototypeOf(Battlefield)).apply(this, arguments));
	  }

	  _createClass(Battlefield, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var style = {};
	      if (!this.props.visible) {
	        style.display = 'none';
	      } else {
	        style.display = 'block';
	        style.maxWidth = '900px';
	      }
	      return React.createElement('canvas', {
	        ref: function ref(c) {
	          return _this2.canvas = c;
	        },
	        className: 'battlefield',
	        width: this.props.width,
	        height: this.props.height,
	        style: style
	      });
	    }
	  }]);

	  return Battlefield;
	}(React.Component);

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	module.exports = function () {
	  function BootstrapRWD() {
	    var _this = this;

	    _classCallCheck(this, BootstrapRWD);

	    this._width = 0;
	    this._size = 'xs';
	    this._onChangeCallbackList = [];
	    this._sizing = {};
	    this._sizing.xs = { min: 0, max: 768 };
	    this._sizing.sm = { min: 768, max: 992 };
	    this._sizing.md = { min: 992, max: 1200 };
	    this._sizing.lg = { min: 1200, max: Number.MAX_VALUE };
	    this._onWindowResize();
	    window.addEventListener('resize', function () {
	      return _this._onWindowResize();
	    });
	  }

	  _createClass(BootstrapRWD, [{
	    key: 'equal',
	    value: function equal(size) {
	      return this._width >= this._sizing[size].min && this._width < this._sizing[size].max;
	    }
	  }, {
	    key: 'biggerThan',
	    value: function biggerThan(size) {
	      return this._width >= this._sizing[size].max;
	    }
	  }, {
	    key: 'smallerThan',
	    value: function smallerThan(size) {
	      return this._width < this._sizing[size].min;
	    }
	  }, {
	    key: 'equalOrBiggerThan',
	    value: function equalOrBiggerThan(size) {
	      return this._width >= this._sizing[size].min;
	    }
	  }, {
	    key: 'equalOrSmallerThan',
	    value: function equalOrSmallerThan(size) {
	      return this._width < this._sizing[size].max;
	    }
	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      var _this2 = this;

	      window.removeEventListener('resize', function () {
	        return _this2._onWindowResize();
	      });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(callback) {
	      this._onChangeCallbackList.push(callback);
	    }
	  }, {
	    key: '_calculateSize',
	    value: function _calculateSize(width) {
	      for (var i in this._sizing) {
	        if (width >= this._sizing[i].min && width < this._sizing[i].max) {
	          return i;
	        }
	      }
	      return 'xs';
	    }
	  }, {
	    key: '_onWindowResize',
	    value: function _onWindowResize() {
	      var oldSize = this._calculateSize(this._width);
	      this._width = window.innerWidth;
	      var newSize = this._calculateSize(this._width);
	      this._size = newSize;
	      if (newSize != oldSize) {
	        for (var i in this._onChangeCallbackList) {
	          this._onChangeCallbackList[i](newSize);
	        }
	      }
	    }
	  }, {
	    key: 'size',
	    get: function get() {
	      return this._size;
	    }
	  }]);

	  return BootstrapRWD;
	}();

/***/ })
/******/ ]);