version: 2.1
orbs:
  node: circleci/node@4.7.0
  aws-s3: circleci/aws-s3@3.0.0

parameters:
  app-id:
    type: string
    default: "jsbattle"

jobs:
  build:
    docker:
      - image: 'circleci/node'
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9e:c9:1f:e6:21:c4:3a:e8:37:2a:88:ed:29:3d:0d:65"
      - checkout
      - run:
          name: Install Graphviz
          command: sudo apt install -y graphviz
      - run:
          name: Install Java
          command: | 
            sudo apt install -y default-jdk
            java --version
      - run: 
          name: Install Libs
          command: |
            sudo apt install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
            sudo apt install -y libgbm-dev 
            npx browserslist@latest --update-db
      - restore_cache:
          keys:
            - node-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v2-{{ .Branch }}-
            - node-v2-
      - run:
          name: Install node_modules
          command: |
            npm install
            npm run bootstrap
      - save_cache:
          paths:
            - ~/project/node_modules
          key: node-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Bootstrap Project
          command: npm run bootstrap
      - run:
          name: Clean Project
          command: npm run clean
      - run:
          name: Lint Project
          command: npm run lint
      - run:
          name: Build Project
          command: npm run build
      - run:
          name: Test Project
          command: npm run test
          environment:
            NODE_OPTIONS: --max_old_space_size=8192 
      - run:
          name: Create install bundle
          command: |
            mkdir -p ./dist

            for filename in ./packages/jsbattle*; do
              tar -zcp --exclude="./node_modules" -C $filename -f ./dist/$(basename $filename).tar.gz .;
            done

            echo '{"name":"jsbattle-runner","version":"1.0.0","scripts":{"postinstall":"npm i ./jsbattle-engine.tar.gz; npm i ./jsbattle-docs.tar.gz; npm i ./jsbattle-react.tar.gz; npm i ./jsbattle-server.tar.gz; npm i ./jsbattle-webpage.tar.gz; npm i ./jsbattle-admin.tar.gz; npm i ./jsbattle.tar.gz; "}}' > ./dist/package.json
            echo '
              const path=require("path");
              process.argv=[
                process.argv[0],
                process.argv[1],
                "start",
                "-c",
                path.resolve(__dirname,"jsbattle.config.js")
              ];
              require(path.resolve(__dirname,"node_modules","jsbattle","dist","jsbattle.js"));
            ' > ./dist/index.js
            echo '
              module.exports = {
                web: {
                  port: process?.env?.port || 8080
                },
                league: {
                  scheduleInterval: 120000,
                  teamSize: 1,
                  timeLimit: 1000
                }
              }
            ' > ./dist/jsbattle.config.js
            cd ./dist; zip -r ../dist.zip *
      - persist_to_workspace:
          root: ~/project/
          paths:
            - dist.zip

  store_artifact:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - attach_workspace:
          at: ~/project/
      - aws-s3/copy:  
          from: dist.zip
          to: s3://artifacts-jmrlab/<< pipeline.parameters.app-id >>/<< pipeline.parameters.app-id >>_dist_${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}.zip

  deploy_dev:
      docker:
        - image: 'cimg/base:stable'
      steps:
        - attach_workspace:
            at: ~/project/
        - run: 
            name: Deploy to DEV
            command: "curl -u $AUTH_TOKEN -f -X 'POST' \"https://$NODEPAD_HOST/api/apps/<< pipeline.parameters.app-id >>-dev/content/zip\" -H 'accept: application/json' -H 'Content-Type: multipart/form-data' -F 'bin=@dist.zip;type=application/zip'"      
    

workflows:
  cicd-workflow:
    jobs:
      - build
      - store_artifact:
          requires:
            - build
          context:
            - nodepad.jmrlab.com
      - deploy_dev:
          requires:
            - build
          context:
            - nodepad.jmrlab.com
          filters:
              branches:
                only:
                  - develop